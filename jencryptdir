#!/bin/sh -e

export GPG_TTY=$(tty)
maindir="/tmp/jencryptdir"
file_of_dir="$maindir/jencryptdirs"
files_to_encrypt="$maindir/jencryptedgpgfiles"

if [ -d $maindir ]
then
	rm $maindir/* -rf
else
	mkdir $maindir
fi

while [ $# -ge 1 ]; do
	case "${1}" in
		-p|--path)
			path="$2"
			shift
			;;
		-r)
			userID="$2"
			shift
			;;
		*)
			if [ ! -z "$path" ]; then
				printf "unrecognized option $1\n"
				exit 1
			else
				path="$1"
			fi
			;;
	esac
	shift
done

encrypt_file () {
	printf "		[+] $(date +%T) : encrpyting $(printf "$1" | sed 's/.\///')"
	encrypted_file="$1".gpg
	if [ "$encrypted_file" = "$1" ]; then
		printf "name file error, exiting...\n"
		exit 0
	fi
	gpg  -r $userID -o "$encrypted_file" --yes --encrypt "$1" > /dev/null 2>&1
	if [ ! -f "$encrypted_file" ]; then
		printf "can't find encrypted file, can't rm original file, exiting...\n"
		exit 0
	else
		shred "$1" -f -n 1 &
	fi
	printf " âœ“\n"
}

encrypt_dir () {
	cd "$line"
	find . -type f -not -name "*.gpg" -maxdepth 1 > $files_to_encrypt
	id="$files_to_encrypt.$(sha1sum $files_to_encrypt | awk '{ printf $1 }')"
	cp $files_to_encrypt $id &
	if [ ! -s $files_to_encrypt ]; then
		printf " : no file to encrypt\n"
		return
	else
		printf "\n"
	fi
	while read file
	do
		encrypt_file "$file"
	done < $files_to_encrypt
	wait
	while read file
	do
		rm "$file"
	done < $id &
}

if [ -z "$path" ]
then
	printf "Please specify a folder or a file\n"
	exit 0
fi

if [ -z "$userID" ]
then
	userID="$USER"
	printf "no user provided, using $USER by default\n"
fi

if [ -f "$path" ]
then
	encrypt_file "$path"
	rm "$path"
else
	cd $path
	path=$(pwd)
	printf "looking for files $path\n\n"
	find $path/ -type d > $file_of_dir
	while read line
	do
		printf "	entering $line"
		cd "$line"
		encrypt_dir
	done < $file_of_dir

	wait
	rm $maindir/* -fr
	printf "\n"
fi
