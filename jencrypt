#!/bin/sh -e

export GPG_TTY=$(tty)
file_init="/tmp/jencrypt"
maindir="/tmp/jencryptdir"
file_of_dir="$maindir/jencryptdirs"
files_to_encrypt="$maindir/jencryptedgpgfiles"

[ -d $maindir ] && rm $maindir/* -rf || mkdir $maindir

printf "" > $file_init
while [ $# -ge 1 ]; do
	case "${1}" in
		-p|--path)
			path="$2"
			shift
			;;
		-r)
			userID="$2"
			shift
			;;
		*)
			if test -f "$1" -o -d "$1"; then
				echo "$(readlink -f "$1")" >> $file_init
			else
				printf "Can't recognize $1\nExiting...\n"
				exit 1
			fi
			;;
	esac
	shift
done

encrypt_file () {
	printf "		[+] $(date +%T) : encrpyting $(printf "$1" | sed 's/.\///')"
	encrypted_file="$1".gpg
	if [ "$encrypted_file" = "$1" ]; then
		printf "name file error, exiting...\n"
		exit 0
	fi
	gpg  -r $userID -o "$encrypted_file" --yes --encrypt "$1" > /dev/null 2>&1
	if [ ! -f "$encrypted_file" ]; then
		printf "can't find encrypted file, can't rm original file, exiting...\n"
		exit 0
	else
		shred "$1" -f -n 1 &
	fi
	printf " âœ“\n"
}

encrypt_dir () {
	cd "$line"
	find . -type f -not -name "*.gpg" -maxdepth 1 > $files_to_encrypt
	id="$files_to_encrypt.$(sha1sum $files_to_encrypt | awk '{ printf $1 }')"
	cp $files_to_encrypt $id &
	if [ ! -s $files_to_encrypt ]; then
		printf " : no file to encrypt\n"
		return
	else
		printf "\n"
	fi
	while read file; do
		encrypt_file "$file"
	done < $files_to_encrypt
	wait
	while read file; do
		rm "$file"
	done < $id &
}

if [ ! -s "$file_init" ]; then
	printf "Please specify a folder, a file or a list of files and folders\n\n"
	printf "Example:\n"
	printf "jdecrypt file1.txt pictures/\n"
	exit 0
fi

if [ -z "$userID" ]; then
	userID="$USER"
	printf "no user provided, using $USER by default\n"
fi

while read entry
do
	if [ -f "$entry" ]; then
		case $entry in
			*.gpg)
				echo "No file to encrypt"
				;;
			*)
				encrypt_file "$entry"
				wait
				rm "$entry"
				;;
		esac
	else
		cd $entry
		find $entry/ -type d > $file_of_dir
		while read line
		do
			printf "	entering $line"
			cd "$line"
			encrypt_dir
		done < $file_of_dir

		wait
		rm $maindir/* -fr
		printf "\n"
	fi
done < $file_init
