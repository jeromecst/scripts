#!/bin/sh -e

export GPG_TTY=$(tty)
file_of_dir="/tmp/jdecryptdirs"
file_of_gpg_files="/tmp/jdecryptgpgfiles"

while [ $# -ge 1 ]; do
	case "${1}" in
		-p|--path)
			path="$2"
			shift
			;;
		-r)
			userID="$2"
			shift
			;;
		*)
			if [ ! -z "$path" ]; then
				printf "unrecognized option $1\n"
				exit 1
			else
				path="$1"
			fi
			;;
	esac
	shift
done

decrypt_file () {
	printf "		[-] $(date +%T) : decrypting $(printf "$1" | sed 's/.\///')"
	decryptedfile=$( printf "$1" | sed 's/.gpg//g')
	if [ "$decryptedfile" = "$1" ]; then
		printf "name file error, exiting...\n"
		exit 1
	fi
	if ! eval "$decrypt_command" >/dev/null 2>&1
	then
		exit 1
	fi
	if [ ! -f "$decryptedfile" ]; then
		printf "can't find decrypted file, can't rm original file, exiting...\n"
		exit 1
	else
		rm "$1"
	fi
	printf " âœ“\n"
}

decrypt_dir () {
	cd "$line"
	find . -type f -name "*.gpg" -maxdepth 1 > $file_of_gpg_files
	if [ ! -s $file_of_gpg_files ]; then
		printf " : no file to decrypt\n"
	else
		printf "\n"
	fi
	while read file
	do
		decrypt_file "$file"
	done < $file_of_gpg_files
}

if [ -z "$path" ]
then
	printf "Please specify a folder or a file\n"
	exit 0
fi

if [ -n "$userID" ]
then
	userID="$USER"
	decrypt_command='gpg  -r $userID -o "$decryptedfile" --yes --decrypt "$1"'
else
	printf "no user provided\n"
	decrypt_command='gpg -o "$decryptedfile" --yes --decrypt "$1"'
fi


if [ -f "$path" ]
then
	case "$path" in
		*.gpg)
			decrypt_file "$path"
			;;
		*)
			echo "No file to decrypt"
			;;
	esac
else
	cd $path
	path=$(pwd)
	printf "looking for gpg files in $path\n\n"
	find $path/ -type d > $file_of_dir
	while read line
	do
		printf "	entering $line"
		cd "$line"
		decrypt_dir
	done < $file_of_dir

	rm $file_of_dir $file_of_gpg_files -f
	printf "\n"
fi
